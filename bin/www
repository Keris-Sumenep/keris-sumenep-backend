#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("kerissumenep-app:server");
var http = require("http");
const database = require("../config/database");
const User = require("../model/user");
const Benda = require("../model/benda");
const TourGate = require("../model/tourGate");
const GambarBenda = require("../model/gambar_benda");
const VideoBenda = require("../model/video_benda");
const VoiceBenda = require("../model/voice_benda");
const MaintananceBenda = require("../model/maintanance");
const Language = require("../model/language");

/**
 * Get port from environment and store in Express.
 */
// Main function to start the server
async function startServer() {
  try {
    // Authenticate database connection
    await database.authenticate();
    console.log("Connection has been established successfully.");
    // await User.sync();
    // await Benda.sync();
    // await TourGate.sync();
    // await GambarBenda.sync();
    // await VideoBenda.sync();
    // await VoiceBenda.sync();
    // await MaintananceBenda.sync();
    // await Language.sync();
  } catch (error) {
    console.error("Unable to connect to the database:", error);
  }
}

// Call the startServer function to start the server
startServer();

var port = normalizePort(process.env.PORT || "7000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server berjalan pada port ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
